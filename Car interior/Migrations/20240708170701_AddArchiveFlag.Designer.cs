// <auto-generated />
using Car_interior.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Car_interior.Migrations
{
    [DbContext(typeof(InteriorDbContext))]
    [Migration("20240708170701_AddArchiveFlag")]
    partial class AddArchiveFlag
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Car_interior.Entities.Cars", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archived = false,
                            CategoryId = 1,
                            Name = "BMW M3",
                            Price = 100000m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 2,
                            Archived = false,
                            CategoryId = 1,
                            Name = "BMW M5",
                            Price = 90000m,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 3,
                            Archived = false,
                            CategoryId = 2,
                            Name = "BMW M4",
                            Price = 105000m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 4,
                            Archived = false,
                            CategoryId = 5,
                            Name = "BMW M8",
                            Price = 120000m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 5,
                            Archived = false,
                            CategoryId = 8,
                            Name = "BMW X5",
                            Price = 70000m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 6,
                            Archived = false,
                            CategoryId = 1,
                            Name = "BMW M760e",
                            Price = 1670000m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 7,
                            Archived = false,
                            CategoryId = 8,
                            Name = "BMW XM",
                            Price = 240000m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 8,
                            Archived = false,
                            CategoryId = 9,
                            Name = "BMW X7",
                            Price = 150000m,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("Car_interior.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Coupe"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Roadster"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Convertible"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Gran Coupe"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Station wagon"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Hatchback"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Crossover"
                        },
                        new
                        {
                            Id = 9,
                            Name = "SUV"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Roadster"
                        });
                });

            modelBuilder.Entity("Car_interior.Entities.Cars", b =>
                {
                    b.HasOne("Car_interior.Entities.Category", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Car_interior.Entities.Category", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
